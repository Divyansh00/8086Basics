<resources>
    <string name="app_name">8086 Basics</string>
    <string name="addressing_text_view_1">The 8086 microprocessor accesses the data in different ways such as from different registers, from memory locations or from I/O ports are called its addressing modes. These addressing modes are categorized according to the accessing method. These are as follows.</string>
    <string name="addressing_text_view_10">The square bracket around the registers i.e. BX, BP are shorthand  for  “the  contents  of  that  registers  at  a displacement from the segment base of .</string>
    <string name="addressing_text_view_11">This  addressing  mode  is  called  direct  because  the displacement or offset of the operand from the segment base is specified directly in the instruction.</string>
    <string name="addressing_text_view_12">This addressing mode is a relation base. The data is stored either in base pointer (BP) or in BX.</string>
    <string name="addressing_text_view_13">In this addressing mode no operands are used to execute the instruction. </string>
    <string name="addressing_text_view_2">In register addressing mode, most 8086 instructions can operate the general purpose register to set as an operand to the instruction. This means a register is a source of an operand as well as the register is only the destination of an operand for an instruction. \nMOV destination, source;\nThis instruction copies the data from the source location to the destination location. The 8-bit or 16 bit registers are certainly valid operands for this instruction. But both operands should be in the same size. Now let&apos;s see some 8086 MOV instructions:</string>
    <string name="addressing_text_view_3">Copies the 16 bit value from BX into AX,\nHere the contents of AX is overlapping, but the contents of BX are not changed. (Both registers are in same size)</string>
    <string name="addressing_text_view_4">In immediate addressing mode, the hexadecimal number either  8­bit  or  16­bit  to  be  loaded  immediately  into  the memory  locations  or  consecutive  memory  locations respectively. i.e to load 8­bit immediate number into an 8­bit memory location or to load a 16­bit immediate number into two consecutive memory locations. Some examples of that instructions</string>
    <string name="addressing_text_view_5">copies  16­bit  hexadecimal  number 437BH in the 16­bit CX register</string>
    <string name="addressing_text_view_6">Load the 8­bit immediate number 48H into the 8­bit CL register</string>
    <string name="addressing_text_view_7">The  memory  addressing  modes  are  used  to  specify  the location  of  an  operand  as  memory.  To  access  data  in memory,  the  8086  should  be  produce  a  20­bit  physical address. It does this by adding a 16­bit value called the effective address (EA). The effective address represents the displacement  or  offset  of  the  desired  operand  from  the segment base. The data segment is most often used as a segment base.</string>
    <string name="addressing_text_view_8">ADD  the  contents  of  DS  (One  of  four segment bases) with BX and result will shift in AL register.</string>
    <string name="addressing_text_view_9">ADD  the  contents  of  DS  (One  of  four segment bases) with BP and result will shift in AL register.</string>
    <string name="admob_interstitial_id">ca-app-pub-4917467301205029/6521067790</string>
    <string name="architecture_text_view_1">Intel 8086 is a 16 bit integer processor. It has 16-bit data bus and 20-bit address bus. The lower 16-bit address lines and 16-bit data lines are multiplexed (AD0-AD15). Since 20-bit address lines are available, 8086 can access up to 2 20 or 1 Giga byte of physical memory.\nThe basic architecture of 8086 is shown below.</string>
    <string name="architecture_text_view_10">In the BIU, the next register, below the segment register is instruction pointer. The instruction pointer (IP) holds the 16-bit address of the next code byte within this code segment.</string>
    <string name="architecture_text_view_11">The execution unit (EU) tells the BIU where to fetch instructions or data from, decodes instructions, and executes instructions.\nThe functional parts of the execution unit are control circuitry or system, instruction decoder, and Arithmetic logic unit (ALU).\nControl circuitry to perform various internal operations. A decoder in the EU translates instructions fetched from memory to generate different internal or external control signals that required performing the operation. The EU has a 16-bit ALU, which can perform arithmetic operations such as add, subtract etc. and logical operations such as AND, OR, XOR, increment, decrement etc.</string>
    <string name="architecture_text_view_12">A 16-bit flag register is a flip-flop which indicates some condition produced by the execution of an instruction or controls certain operations of the EU. They are modified automatically by CPU after mathematical operations. It has 9 flags and they are divided into two categories:\n1. Conditional Flags\n2. Control Flags</string>
    <string name="architecture_text_view_13">Conditional flags represent result of last arithmetic or logical instructions.</string>
    <string name="architecture_text_view_14">This flag will be set to one if the arithmetic operation produces the carry in MSB position. It is also used in multiple-precision arithmetic.</string>
    <string name="architecture_text_view_15">If an operation performed in ALU generates a carry/barrow from lower nibble (i.e. D0 – D3) to upper nibble (i.e. D4 – D7), the AF flag is set i.e. carry given by D3 bit to D4 is AF flag. This is not a general-purpose flag; it is used internally by the processor to perform Binary to BCD conversion.</string>
    <string name="architecture_text_view_16">This flag is used to indicate the parity of result. If lower order 8-bits of the result contains even number of 1’s, the Parity Flag is set to one and for odd number of 1’s, the Parity Flag is reset i.e. zero.</string>
    <string name="architecture_text_view_17">It is set to one; if the result of arithmetic or logical operation is zero else it is reset.</string>
    <string name="architecture_text_view_18">In sign magnitude format the sign of number is indicated by MSB bit. If the result of operation is negative, sign flag is set to one.</string>
    <string name="architecture_text_view_19">It occurs when signed numbers are added or subtracted. An OF indicates that the result has exceeded the capacity of machine.</string>
    <string name="architecture_text_view_2">The internal architecture of Intel 8086 is divided into two units, viz., Bus Interface Unit (BIU) and Execution Unit (EU).</string>
    <string name="architecture_text_view_20">Control flags are intentionally set or reset to control certain operations of the processor with specific instructions put in the program from the user. Control flags are as follows:</string>
    <string name="architecture_text_view_21">It is used for single step control. It allows user to execute one instruction of a program at a time for debugging. When trap flag is set, program can be run in single step mode.</string>
    <string name="architecture_text_view_22">It is an interrupt enable/disable flag, i.e. used to allow/prohibit the interruption of a program. If it is set, the maskable interrupt is enabled and if it is reset, the interrupt is disabled.</string>
    <string name="architecture_text_view_23">It is used in string operation. If it is set, string bytes are accessed from higher memory address to lower memory address. When it is reset, the string bytes are accessed from lower memory address to higher memory address.</string>
    <string name="architecture_text_view_24">The EU has eight general purpose registers labeled AH, AL, BH, BL, CH, CL, DH, and DL. These registers can be used individually for temporary storage of 8-bit data. The AL register is also called the accumulator. Certain pairs of these general purpose registers can be used together to store 16-bit data. The valid register pairs are AH and AL, BH and BL, CH and CL and DH and DL. These register pairs is referred to the AX, BX, CX, and DX resp.</string>
    <string name="architecture_text_view_25">For 16-bit operations, AX is called the accumulator register that stores operands for arithmetic operations.</string>
    <string name="architecture_text_view_26">This register is mainly used as a base register. It holds the starting base location of a memory region within a data segment.</string>
    <string name="architecture_text_view_27">It is defined as a counter. It is primarily used in loop instruction to store loop counter.</string>
    <string name="architecture_text_view_28">DX register is used to contain I/O port address for I/O instruction.</string>
    <string name="architecture_text_view_29">The stack pointer (SP) register contains the 16-bit offset from the start of the segment to the memory location where a word was most recently stored on the stack. The memory location where a word was most recently stored is called the top of stack.\nOther Pointer and Index Registers\nThe EU also contains a 16-bit source index (SI) register, base pointer (BP) registers, and Destination Index (DI) registers. These three registers can be mainly used for temporary storage of 16-bit data just like a general purpose registers.</string>
    <string name="architecture_text_view_3">The BIU handles all data and addresses on the buses for the execution unit such as it sends out addresses, fetches instructions from memory, reads data from ports and memory as well as writes data to ports and memory. In BIU there are so many functional groups or parts these are as follows.</string>
    <string name="architecture_text_view_4">To increase the execution speed, BIU fetches as many as six instruction bytes ahead to time from memory. The pre fetched instruction bytes are held for the EU in a first in first out group of registers called a instruction queue. When the EU is ready for its next instruction, it simply reads the instruction from this instruction queue. This is much faster than sending out an address to the system memory and to send back the next instruction byte. Fetching the next instruction while the current instruction executes is called pipelining.</string>
    <string name="architecture_text_view_5">The BIU contains four 16-bit segment registers. They are: the extra segment (ES) register, the code segment (CS) registers, the data segment (DS) registers, and the stack segment (SS) registers. These segment registers are used to hold the upper 16 bits of the starting address for each of the segments. The part of a segment starting address stored in a segment register is often called the segment base.</string>
    <string name="architecture_text_view_6">The CS register is used for addressing a memory location in the Code Segment of the memory, where the executable program is stored.</string>
    <string name="architecture_text_view_7">The DS contains most data used by program. Data are accessed in the\nData Segment by an offset address or the content of other register that holds the offset address.</string>
    <string name="architecture_text_view_8">SS defined a section of memory to store addresses and data while a subprogram executes.</string>
    <string name="architecture_text_view_9">ES is additional data segment that is used by some of the string to hold the extra destination data.</string>
    <string name="assemblier_directive_defination">The ASSUME directive is used to tell the assembler that the name of the logical segment should be used for a specified segment. The 8086 works directly with only 4 physical segments: a Code segment, a data segment, a stack segment, and an extra segment.</string>
    <string name="auth_google_play_services_client_facebook_display_name">Facebook</string>
    <string name="auth_google_play_services_client_google_display_name">Google</string>
    <string name="banner_ad_unit_id">ca-app-pub-4917467301205029/3358144994</string>
    <string name="banner_ad_unit_id2">ca-app-pub-4917467301205029/4834878197</string>
    <string name="create_calendar_message">Allow Ad to create a calendar event?</string>
    <string name="create_calendar_title">Create calendar event</string>
    <string name="decline">Decline</string>
    <string name="instruction_set_text_view_1">The MOV instruction copies a word or byte of data from a specified source to a specified destination. The destination can be a register or a memory location. The source can be a register, a memory location or an immediate number. The source and destination cannot both be memory locations. They must both be of the same type (bytes or words). MOV instruction does not affect any flag.</string>
    <string name="instruction_set_text_view_2">MOV CX, 037AH\nMOV BL, [437AH] \nMOV AX, BX\nMOV DL, [BX]\nMOV DS, BX</string>
    <string name="instruction_set_text_view_3">The XCHG instruction exchanges the content of a register with the content of another register or with the content of memory location(s). It cannot directly exchange the content of two memory locations. The source and destination must both be of the same type (bytes or words). The segment registers cannot be used in this instruction. This instruction does not affect any flag.</string>
    <string name="instruction_set_text_view_4">XCHG AX, DX\nXCHG BL, CH \nMOV AX, BX\nXCHG AL, PRICES [BX] \n</string>
    <string name="introduction_8086">8086 is an enhanced version of 8085 that has been developed by Intel in 1976. It is a 16 bit Microprocessor. It has a powerful instruction set and it is capable to providing multiplication and division operations directly. It has 20  address  lines  and  16  data  lines.  So  it  can  access  upto  1  MB  of memory. It supports two modes of operation: first is maximum mode and second is minimum  mode.  Minimum  mode  is  applicable  for  system  that  have  a single  processor  and  maximum  mode  is  used  for  the  multiprocessor system. 8086  provides  an  additional  features  that  it  has  an  instruction  queue capable  to  store  six  instruction  bytes  from  the  memory.  The  next instruction is fetched while the present instruction is being executed. So it makes the processor fast.</string>
    <string name="introduction_features_text_view">1.It is 16 bit processor. So that it has 16 bit ALU, 16 bit registers and internal data bus and 16 bit external data bus. It make s faster processing.\n\n2.It has three version based on the frequency of operation:\na)8086 -&gt; 5MHz\nb)8086-2 -&gt;8MHz\nc)8086-1 -&gt;10 MHz\n\n3.8086 has 20 bit address lines to access memory. Hence it can access \n 2^20 = 1 MB memory location.\n\n4.8086 has 16-bit address lines to access I/O devices, hence it can access\n 2^16 = 64K I/O location\n\n5.Pipelining:-8086 uses two stage of pipelining. First is Fetch Stage and the second is Execute Stage.\n\nFetch stage that prefetch upto 6 bytes of instructions stores them in the queue.\nExecute stage that executes these instructions.\nPipelining improves the performance of the processor so that operation is faster.\n\n6.Operates in two modes:-8086 operates in two modes:\na)Minimum Mode: A system with only one microprocessor.\nb)Maximum Mode:-A system with multiprocessor.\n\n7.8086 uses memory banks:-The 8086 uses a memory banking system. It means entire data is not stored sequentially in a single memory of 1 MB but memory is divided into two banks of 512KB.\n\n8.Interrupts:-8086 has 256 vectored interrupts.\n\n9.Multiplication And Division:-8086 has a powerful innstrction set. So that it supports Multiply and Divide operation.</string>
    <string name="program_21">.model small\n.data\nn1 dw 0020h\nn2 dw ?\n.code\nstart:MOV ax,@data\n MOVds,ax\n MOVah,00h\n MOV ax,n1\n MOV bx,n1\n MUL ax\n MUL bx\n MOV n2,ax\n INT 3h\nendstart\n end</string>
    <string name="store_picture_message">Allow Ad to store image in Picture gallery?</string>
    <string name="store_picture_title">Save image</string>
    <string name="viva_text_view_1">Microprocessor is a CPU fabricated on a single chip, program-controlled device, which fetches the instructions from memory, decodes and executes the instructions.</string>
    <string name="viva_text_view_10">The Registers AX, BX, CX, DX are the general Purpose 16-bit registers. AX register as 16-bit accumulator. BX register is used as an offset Storage. CX register is used as default or implied counter. DX register is used as an implicit operand or destination in case of a few instructions.</string>
    <string name="viva_text_view_11">There are 4 Segment Registers Code Segment (CS), Data Segment (DS), Extra Segment (ES) &amp; Stack Segment (SS) registers. CS is used for addressing memory location in code. DS is used to points the data. ES refers to a segment which is essentially in another data segment. SS is used for addressing stack segment of memory.</string>
    <string name="viva_text_view_12">The complete architecture of 8086 can be divided into 2types:-Bus Interface Unit (BIU) &amp; Execution Unit. \n The BIU contains the circuit for physical address calculations and a pre coding instruction byte queue &amp; it makes the bus signals available for external interfacing of the devices.\n The EU contains the register set of 8086 except segment registers and IP. It has a 16-bit ALU, able to perform arithmetic and Logic operations.</string>
    <string name="viva_text_view_13">The part of the instruction that specifies the operation to be performed is called the Operation code or Op code.</string>
    <string name="viva_text_view_14">The data on which the operation is to be performed is called as an Operand.</string>
    <string name="viva_text_view_15">-A JMP instruction permantely changes the program counter.\n A CALL instruction leaves information on the stack so that the original program execution sequence can be resumed.\n</string>
    <string name="viva_text_view_16">Interrupt is an external signal that causes a microprocessor to jump to a specific subroutine.</string>
    <string name="viva_text_view_17">An instruction is a binary pattern enetered through an input device to command the microprocessor to perform that specific function.</string>
    <string name="viva_text_view_18">The number of bits processed by the processor in a single instruction.</string>
    <string name="viva_text_view_19">Microcontroller is a device that includes microprocessor:memory and I/O signal lines on a single chip, fabricated using VLSI technology.\n Microcomputer is a computer that is designed using microprocessor as its CPU.It includes microprocessor,memory and I/O.\n</string>
    <string name="viva_text_view_2">It is the set of the instructions that the Microprocessor can execute.</string>
    <string name="viva_text_view_20">he assembler translates the assembly language program text which is given as input to the assembler to their binary equivalents known as object code.\n The time required to translate the assembly code to object code is called access time.The assembler checks for syntax errors&amp;displays them before giving the object code.\n</string>
    <string name="viva_text_view_21">In 8086,to speedup the execution program,the instructions fetching and execution of instructions are overlapped each other.This is known as Pipelining.</string>
    <string name="viva_text_view_22">Program counter holds the address of either the first byte of the next instruction to be fetched for execution or the address of the next byte of a multi byte instruction, which has not been completely fetched. In both the cases it gets incremented automatically one by one as the instruction bytes get fetched. Also Program register keeps the address of the next instruction.</string>
    <string name="viva_text_view_23">The processor made of PMOS / NMOS / HMOS / HCMOS technology is called 1st / 2nd / 3rd / 4th generation processor, and it is made up of 4 / 8 / 16 / 32 bits.</string>
    <string name="viva_text_view_24">5 Mhz is the Maximum clock frequency in 8086.</string>
    <string name="viva_text_view_25">An interrupt that can be turned off by the programmer is known as Maskable interrupt.</string>
    <string name="viva_text_view_26">An interrupt which can be never be turned off (ie. disabled) is known as Non-Maskable interrupt</string>
    <string name="viva_text_view_27">Execution Unit receives program instruction codes and data from BIU, executes these instructions and store the result in general registers.</string>
    <string name="viva_text_view_28">JMP is Unconditional Branch.\nJNC is Conditional Branch.</string>
    <string name="viva_text_view_29">The basic units or blocks of a microprocessor are ALU, an array of registers and control unit.</string>
    <string name="viva_text_view_3">The number of bits processed by the processor in a single instruction.</string>
    <string name="viva_text_view_30">The Software is a set of instructions or commands needed for performing a specific task by a programmable device or a computing machine.\nThe Hardware refers to the components or devices used to form computing machine in which the software can be run and tested. Without software the Hardware is an idle machine.</string>
    <string name="viva_text_view_31">The language in which the mnemonics (short -hand form of instructions) are used to write a program is called assembly language. The manufacturers of microprocessor give the mnemonics.</string>
    <string name="viva_text_view_32">Bus is a group of conducting lines that carries data, address and control signals.</string>
    <string name="viva_text_view_33">The 8086 can operate on either 8-bit or 16-bit data. The 8086 uses 20 bit address to access memory and 16-bit address to access 1/0 devices.</string>
    <string name="viva_text_view_34">The special functions carried by the registers of 8086 are the following.\nRegister Special function\n1. AX 16-bit Accumulator\n2. AL 8-bit Accumulator\n3. BX Base Register\n4. CX Count Register\n5. DX .Data Register.</string>
    <string name="viva_text_view_35">In pipelined architecture the processor will have number of functional units and the execution time of functional units are overlapped. Each functional unit works independently most of the time.</string>
    <string name="viva_text_view_36">Machine cycle is defined as the time required to complete one operation of accessing memory, I/O, or acknowledging an external request. This cycle may consist of three to six T-states.</string>
    <string name="viva_text_view_37">T-State is defined as one subdivision of the operation performed in one clock period. These subdivisions are internal states synchronized with the system clock, and each T-State is precisely equal to one clock period..</string>
    <string name="viva_text_view_38">Generally I/O devices are slow devices. Therefore the speed of I/O devices does not match with the speed of microprocessor. And so an interface is provided between system bus and I/O devices.</string>
    <string name="viva_text_view_39">The memory mapping is the process of interfacing memories to microprocessor and allocating addresses to each memory locations</string>
    <string name="viva_text_view_4">Clock speed is measured in the MHz and it determines that how many instructions a processor can processed. The speed of the microprocessor is measured in the MHz or GHz.</string>
    <string name="viva_text_view_40">The number of bits processed by the processor in a single instruction.</string>
    <string name="viva_text_view_41">The direct data transfer between I/O device and memory is called DMA.</string>
    <string name="viva_text_view_42">The I/O devices are generally slow devices and their timing characteristics do not match with processor timings. Hence the I/O devices are connected to system bus through the ports.</string>
    <string name="viva_text_view_43">When I/O devices are memory mapped, some of the addresses are allotted to I/O devices and so the full address space cannot be used for addressing memory (i.e., physical memory address space will be reduced). Hence memory mapping is useful only for small systems, where the memory requirement is less.</string>
    <string name="viva_text_view_44">The sequence of operations that a processor has to carry out while executing the instruction is called Instruction cycle. Each instruction cycle of a processor indium consists of a number of machine cycles.</string>
    <string name="viva_text_view_45">The processor cycle or machine cycle is the basic operation performed by the processor. To execute an instruction, the processor will run one or more machine cycles in a particular order.</string>
    <string name="viva_text_view_46">In general, the instruction cycle of an instruction can be divided into fetch and execute cycles. The fetch cycle is executed to fetch the opcode from memory. The execute cycle is executed to decode the instruction and to perform the work instructed by the instruction.</string>
    <string name="viva_text_view_47">In Block transfer mode, the DMA controller will transfer a block of data and relieve the bus for processor. After sometime another block of data is transferred by DMA and so on.\nIn Demand transfer mode the DMA controller will complete the entire .data transfer at a stretch and then relieve the bus to processor.</string>
    <string name="viva_text_view_48">The timing diagram provides information regarding the status of various signals, when a machine cycle is executed. The knowledge of timing diagram is essential for system designer to select matched peripheral devices like memories, latches, ports, etc., to form a microprocessor system.</string>
    <string name="viva_text_view_49">The opcode fetch cycle is a machine cycle executed to fetch the opcode of an instruction stored in memory. Every instruction starts with opcode fetch machine cycle.</string>
    <string name="viva_text_view_5">A memory address on the 8086 consists of two numbers, usually written in hexadecimal and separated by a colon, representing the segment and the offset. This combination of segment and offset is referred to as a logical address\n Logical address=segment: offset</string>
    <string name="viva_text_view_50">The status signals can be used by the system designer to track the internal operations of the processor. Also, it can be used for memory expansion (by providing separate memory banks for program &amp; data and selecting the bank using status signals).</string>
    <string name="viva_text_view_6">In general, memory accesses take the form of the following example:\n Mov ax, [baseReg + indexReg + constant]\n This example copies a word sized value into the register AX.\n Combined, the three parameters in brackets determine what is called the effective address, which is simply the offset referenced by the instruction</string>
    <string name="viva_text_view_7">Physical memory address pointed by SEGMENT:OFFSET pair is calculated as:\nPhysical address = (&lt;Segment Addr&gt; * 10) + &lt;Offset Addr&gt;</string>
    <string name="viva_text_view_8">-Divided into 2 parts:-Condition code or status flags and machine control flags.\n S -Sign Flag:-Is to set when the result of any computation is negative.\n Z -Zero Flag:-Is to set if the result of the computation or comparision performed by the previous instruction is zero.\n C -Carry Flag:-Is set when there is carry out of MSB in case of addition or a borrow in case of subtraction.\n T -Trap Flag:-Is set, the processor enters the single step execution mode.\n I -Interrupt Flag:-Is set, the mask able interrupts are recognized by the CPU.\n D -Direction Flag:-Is set for Auto incrementing or Auto decrementing mode in string manipulation instructions.\n AC -Auxiliary Carry Flag:-Is set if there is a carry from the lowest nibble during addition or borrow for the lowest nibble.\n O -Overflow Flag:-Is set if the result of a signed operation is large enough to be accommodated in a destination register.</string>
    <string name="viva_text_view_9">Because of high stability, large Q (Quality Factor) &amp; the frequency that doesn’t drift with aging. Crystal is used as a clock source most of the times.</string>
</resources>
